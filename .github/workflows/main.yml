# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  SA_EMAIL: githubactionkey@unitykubernetesbuilder.iam.gserviceaccount.com
  GKE_ZONE: 'us-central1-c'
  GKE_REGION: 'us-central1'
  GKE_PROJECT: 'unitykubernetesbuilder'
  GKE_CLUSTER: 'cluster-1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '288.0.0'
        service_account_email: ${{ secrets.SA_EMAIL }}
        service_account_key: ${{ secrets.GCLOUD_AUTH }}
    - id: read-k8s-config
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE --project $GKE_PROJECT
        # run a command to get access-token
        kubectl version
        kubeConfig=$(cat ~/.kube/config | base64 -w0)
        PVC_ID=$(cat /proc/sys/kernel/random/uuid)
        echo "::set-output name=kubeConfig::$kubeConfig"
        echo "::set-output name=PVC_ID::$PVC_ID"
        echo "::add-mask::$kubeConfig"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: $PVC_ID
        spec:
          accessModes:
            ['ReadWriteOnce']
          volumeMode:
            'Filesystem'
          resources:
            requests:
              storage: '1Gi'
        EOF
        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: $PVC_ID-populate
        spec:
          template:
            spec:
              volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: $PVC_ID
              restartPolicy: Never
              containers:
              - name: download-pv
                image: alpine:latest
                command: ['/bin/sh']
                args:
                  ['-c', 'echo "test" > /data/repo/test.txt']
                volumeMounts:
                - name: data
                  mountPath: /data
        EOF
        kubectl wait --for=condition=complete pod -l job-name=$PVC_ID-populate --timeout=$20s
    - uses: ./
      with:
        kubeConfig: ${{ steps.read-k8s-config.outputs.kubeConfig }}
        volume: ${{ steps.read-k8s-config.outputs.PVC_ID }}
        sourcePath: repo/
    - run: |
        kubectl delete PVC/${{ steps.read-k8s-config.outputs.PVC_ID }}
